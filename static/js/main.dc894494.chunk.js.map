{"version":3,"sources":["Components/Title.js","Components/Form.js","Components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","react_default","a","createElement","className","Form","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","weatherApp","state","undefined","_callee","e","region","apiCall","apiData","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","current","temp_f","location","condition","text","stop","this","Components_Title","Components_Form","Components_Weather","React","Component","Boolean","window","hostname","match","ReactDOM","render","App_weatherApp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dc894494.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Title = props => (\n    <div className=\"title text-center\">\n        <h1>Weather</h1>\n    </div>\n);\n\nexport default Title;","import React from \"react\";\n\nconst Form = props => (\n    <div className=\"text-center\">\n      <form onSubmit={props.getWeather} >\n        <input type=\"text\" name=\"city\" placeholder=\"City\"/>\n        <input type=\"text\" name=\"region\" placeholder=\"State\"/>\n        <input type=\"text\" name=\"country\" placeholder=\"Country\"/>\n        <div>\n            <button>Submit</button>\n        </div>\n    </form>  \n    </div>\n    \n);\n\nexport default Form;","import React from \"react\";\n\n    const Weather = props => (\n        <div className=\"text-center title\">\n            { props.city && props.country && <p>Location: {props.city}, {props.country}</p>}\n            { props.temperature && <p>Temperature: {props.temperature}</p>}              \n            { props.humidity && <p>Humidity: {props.humidity}</p>}\n            { props.description && <p>Condition: {props.description}</p>}\n            { props.error && <p>{props.error}</p>}\n        </div>\n    );\n\n    export default Weather;","import React from \"react\";\nimport Title from \"./Components/Title\";\nimport Form from \"./Components/Form\";\nimport Weather from \"./Components/Weather\";\n\nexport default class weatherApp extends React.Component{\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined,\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const region = e.target.elements.region.value;\n    const country = e.target.elements.country.value;\n    const apiCall = await fetch(`https://api.apixu.com/v1/current.json?key=ef186164f5694436ade215218191101&q=${city},${region},${country}`);\n    const apiData = await apiCall.json();\n    console.log(apiData);\n    if ( city && country ){\n      this.setState ({  \n      temperature: apiData.current.temp_f,\n      city: apiData.location.name,\n      country: apiData.location.country,\n      humidity: apiData.current.humidity,\n      description :apiData.current.condition.text,\n      error: \"\"\n    });\n    }else{\n      this.setState ({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description :undefined,\n        error: \"*Please enter the values*\"\n      });\n    }\n  }\n\n  render(){\n    return(\n      <div className=\"container\">\n      <div className=\"main\">\n      <div className=\"main-sub\">\n        <Title/>\n        <Form getWeather = {this.getWeather} />\n        <Weather \n        temperature = {this.state.temperature}\n        city = {this.state.city}\n        country = {this.state.country}\n        humidity = {this.state.humidity}\n        description = {this.state.description}\n        error = {this.state.error}\n        />\n      </div> \n      </div>\n      </div>\n    );\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}